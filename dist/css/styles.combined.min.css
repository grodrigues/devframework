/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */

/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */

html {
  font-family: sans-serif; /* 1 */
  -ms-text-size-adjust: 100%; /* 2 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/**
 * Remove default margin.
 */

body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */

audio,
canvas,
progress,
video {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */

[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */

/**
 * Remove the gray background color from active links in IE 10.
 */

a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */

a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */

/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */

abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */

b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */

dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */

mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */

/**
 * Remove border when inside `a` element in IE 8/9/10.
 */

img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */

svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */

/**
 * Address margin not present in IE 8/9 and Safari.
 */

figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */

hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */

pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */

code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */

/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */

/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */

button,
input,
optgroup,
select,
textarea {
  color: inherit; /* 1 */
  font: inherit; /* 2 */
  margin: 0; /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */

button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */

button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button; /* 2 */
  cursor: pointer; /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */

input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */

input[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  box-sizing: content-box; /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */

legend {
  border: 0; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */

textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */

optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/* INSERT HERE THE EXTEND CLASS */
.list {
  list-style: none;
  padding: 0;
  margin: 0; }

@font-face {
  font-family: "Open Sans";
  src: url(../fonts/OpenSans-Light.ttf);
  font-weight: 300; }

@font-face {
  font-family: "Open Sans";
  src: url(../fonts/OpenSans-Regular.ttf);
  font-weight: 400; }

@font-face {
  font-family: "Open Sans";
  src: url(../fonts/OpenSans-Semibold.ttf);
  font-weight: 600; }

@font-face {
  font-family: "Open Sans";
  src: url(../fonts/OpenSans-Bold.ttf);
  font-weight: 700; }

@font-face {
  font-family: "Open Sans";
  src: url(../fonts/OpenSans-ExtraBold.ttf);
  font-weight: 800; }

*, *:before, *:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box; }

html, body {
  height: 100%; }

body {
  background-color: #DFDFDF;
  font-family: 'Open Sans', 'sans-serif';
  font-size: 10px;
  color: #6b6b6b; }

main {
  margin-top: -3rem; }

a {
  text-decoration: none; }

p {
  font-size: 1rem; }

img {
  max-width: 100%; }

section {
  background-color: #fff;
  margin-bottom: 2rem;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.16), 0 2px 10px rgba(0, 0, 0, 0.12); }

.wrap {
  *zoom: 1;
  *zoom: 1;
  width: auto;
  max-width: 1280px;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  padding: 1rem; }
  .wrap:before, .wrap:after {
    content: '';
    display: table; }
  .wrap:after {
    clear: both; }
  .wrap:before, .wrap:after {
    content: '';
    display: table; }
  .wrap:after {
    clear: both; }

.list {
  *zoom: 1; }
  .list:before, .list:after {
    content: '';
    display: table; }
  .list:after {
    clear: both; }

.section-title {
  display: block;
  width: 100%;
  margin: 2rem 0;
  *zoom: 1; }
  .section-title:before, .section-title:after {
    content: '';
    display: table; }
  .section-title:after {
    clear: both; }
  .section-title h1 {
    display: inline-block;
    margin: 0;
    padding: 0 1rem;
    color: #424242;
    text-transform: uppercase; }
    .section-title h1 i {
      font-size: 2rem; }

.progress-label {
  margin: 0 0 5px;
  font-size: .8rem;
  color: #424242; }

.progress {
  background-color: #F3F3F3;
  height: 30px;
  width: 100%;
  position: relative;
  margin-bottom: 1rem; }
  .progress .progress-bar-verde-10 {
    position: absolute;
    width: 10%;
    height: 100%;
    background-color: #2CC36B; }
  .progress .progress-bar-azul-10 {
    position: absolute;
    width: 10%;
    height: 100%;
    background-color: #2E8ECE; }
  .progress .progress-bar-roxo-10 {
    position: absolute;
    width: 10%;
    height: 100%;
    background-color: #9B50BA; }
  .progress .progress-bar-amarelo-10 {
    position: absolute;
    width: 10%;
    height: 100%;
    background-color: #F2CA26; }
  .progress .progress-bar-vermelho-10 {
    position: absolute;
    width: 10%;
    height: 100%;
    background-color: #D04233; }
  .progress .progress-bar-laranja-10 {
    position: absolute;
    width: 10%;
    height: 100%;
    background-color: #e67e22; }
  .progress .progress-bar-rosa-10 {
    position: absolute;
    width: 10%;
    height: 100%;
    background-color: #D2527F; }
  .progress .progress-bar-marron-10 {
    position: absolute;
    width: 10%;
    height: 100%;
    background-color: #795548; }
  .progress .progress-bar-preto-10 {
    position: absolute;
    width: 10%;
    height: 100%;
    background-color: #000; }
  .progress .progress-bar-verde-20 {
    position: absolute;
    width: 20%;
    height: 100%;
    background-color: #2CC36B; }
  .progress .progress-bar-azul-20 {
    position: absolute;
    width: 20%;
    height: 100%;
    background-color: #2E8ECE; }
  .progress .progress-bar-roxo-20 {
    position: absolute;
    width: 20%;
    height: 100%;
    background-color: #9B50BA; }
  .progress .progress-bar-amarelo-20 {
    position: absolute;
    width: 20%;
    height: 100%;
    background-color: #F2CA26; }
  .progress .progress-bar-vermelho-20 {
    position: absolute;
    width: 20%;
    height: 100%;
    background-color: #D04233; }
  .progress .progress-bar-laranja-20 {
    position: absolute;
    width: 20%;
    height: 100%;
    background-color: #e67e22; }
  .progress .progress-bar-rosa-20 {
    position: absolute;
    width: 20%;
    height: 100%;
    background-color: #D2527F; }
  .progress .progress-bar-marron-20 {
    position: absolute;
    width: 20%;
    height: 100%;
    background-color: #795548; }
  .progress .progress-bar-preto-20 {
    position: absolute;
    width: 20%;
    height: 100%;
    background-color: #000; }
  .progress .progress-bar-verde-30 {
    position: absolute;
    width: 30%;
    height: 100%;
    background-color: #2CC36B; }
  .progress .progress-bar-azul-30 {
    position: absolute;
    width: 30%;
    height: 100%;
    background-color: #2E8ECE; }
  .progress .progress-bar-roxo-30 {
    position: absolute;
    width: 30%;
    height: 100%;
    background-color: #9B50BA; }
  .progress .progress-bar-amarelo-30 {
    position: absolute;
    width: 30%;
    height: 100%;
    background-color: #F2CA26; }
  .progress .progress-bar-vermelho-30 {
    position: absolute;
    width: 30%;
    height: 100%;
    background-color: #D04233; }
  .progress .progress-bar-laranja-30 {
    position: absolute;
    width: 30%;
    height: 100%;
    background-color: #e67e22; }
  .progress .progress-bar-rosa-30 {
    position: absolute;
    width: 30%;
    height: 100%;
    background-color: #D2527F; }
  .progress .progress-bar-marron-30 {
    position: absolute;
    width: 30%;
    height: 100%;
    background-color: #795548; }
  .progress .progress-bar-preto-30 {
    position: absolute;
    width: 30%;
    height: 100%;
    background-color: #000; }
  .progress .progress-bar-verde-40 {
    position: absolute;
    width: 40%;
    height: 100%;
    background-color: #2CC36B; }
  .progress .progress-bar-azul-40 {
    position: absolute;
    width: 40%;
    height: 100%;
    background-color: #2E8ECE; }
  .progress .progress-bar-roxo-40 {
    position: absolute;
    width: 40%;
    height: 100%;
    background-color: #9B50BA; }
  .progress .progress-bar-amarelo-40 {
    position: absolute;
    width: 40%;
    height: 100%;
    background-color: #F2CA26; }
  .progress .progress-bar-vermelho-40 {
    position: absolute;
    width: 40%;
    height: 100%;
    background-color: #D04233; }
  .progress .progress-bar-laranja-40 {
    position: absolute;
    width: 40%;
    height: 100%;
    background-color: #e67e22; }
  .progress .progress-bar-rosa-40 {
    position: absolute;
    width: 40%;
    height: 100%;
    background-color: #D2527F; }
  .progress .progress-bar-marron-40 {
    position: absolute;
    width: 40%;
    height: 100%;
    background-color: #795548; }
  .progress .progress-bar-preto-40 {
    position: absolute;
    width: 40%;
    height: 100%;
    background-color: #000; }
  .progress .progress-bar-verde-50 {
    position: absolute;
    width: 50%;
    height: 100%;
    background-color: #2CC36B; }
  .progress .progress-bar-azul-50 {
    position: absolute;
    width: 50%;
    height: 100%;
    background-color: #2E8ECE; }
  .progress .progress-bar-roxo-50 {
    position: absolute;
    width: 50%;
    height: 100%;
    background-color: #9B50BA; }
  .progress .progress-bar-amarelo-50 {
    position: absolute;
    width: 50%;
    height: 100%;
    background-color: #F2CA26; }
  .progress .progress-bar-vermelho-50 {
    position: absolute;
    width: 50%;
    height: 100%;
    background-color: #D04233; }
  .progress .progress-bar-laranja-50 {
    position: absolute;
    width: 50%;
    height: 100%;
    background-color: #e67e22; }
  .progress .progress-bar-rosa-50 {
    position: absolute;
    width: 50%;
    height: 100%;
    background-color: #D2527F; }
  .progress .progress-bar-marron-50 {
    position: absolute;
    width: 50%;
    height: 100%;
    background-color: #795548; }
  .progress .progress-bar-preto-50 {
    position: absolute;
    width: 50%;
    height: 100%;
    background-color: #000; }
  .progress .progress-bar-verde-60 {
    position: absolute;
    width: 60%;
    height: 100%;
    background-color: #2CC36B; }
  .progress .progress-bar-azul-60 {
    position: absolute;
    width: 60%;
    height: 100%;
    background-color: #2E8ECE; }
  .progress .progress-bar-roxo-60 {
    position: absolute;
    width: 60%;
    height: 100%;
    background-color: #9B50BA; }
  .progress .progress-bar-amarelo-60 {
    position: absolute;
    width: 60%;
    height: 100%;
    background-color: #F2CA26; }
  .progress .progress-bar-vermelho-60 {
    position: absolute;
    width: 60%;
    height: 100%;
    background-color: #D04233; }
  .progress .progress-bar-laranja-60 {
    position: absolute;
    width: 60%;
    height: 100%;
    background-color: #e67e22; }
  .progress .progress-bar-rosa-60 {
    position: absolute;
    width: 60%;
    height: 100%;
    background-color: #D2527F; }
  .progress .progress-bar-marron-60 {
    position: absolute;
    width: 60%;
    height: 100%;
    background-color: #795548; }
  .progress .progress-bar-preto-60 {
    position: absolute;
    width: 60%;
    height: 100%;
    background-color: #000; }
  .progress .progress-bar-verde-70 {
    position: absolute;
    width: 70%;
    height: 100%;
    background-color: #2CC36B; }
  .progress .progress-bar-azul-70 {
    position: absolute;
    width: 70%;
    height: 100%;
    background-color: #2E8ECE; }
  .progress .progress-bar-roxo-70 {
    position: absolute;
    width: 70%;
    height: 100%;
    background-color: #9B50BA; }
  .progress .progress-bar-amarelo-70 {
    position: absolute;
    width: 70%;
    height: 100%;
    background-color: #F2CA26; }
  .progress .progress-bar-vermelho-70 {
    position: absolute;
    width: 70%;
    height: 100%;
    background-color: #D04233; }
  .progress .progress-bar-laranja-70 {
    position: absolute;
    width: 70%;
    height: 100%;
    background-color: #e67e22; }
  .progress .progress-bar-rosa-70 {
    position: absolute;
    width: 70%;
    height: 100%;
    background-color: #D2527F; }
  .progress .progress-bar-marron-70 {
    position: absolute;
    width: 70%;
    height: 100%;
    background-color: #795548; }
  .progress .progress-bar-preto-70 {
    position: absolute;
    width: 70%;
    height: 100%;
    background-color: #000; }
  .progress .progress-bar-verde-80 {
    position: absolute;
    width: 80%;
    height: 100%;
    background-color: #2CC36B; }
  .progress .progress-bar-azul-80 {
    position: absolute;
    width: 80%;
    height: 100%;
    background-color: #2E8ECE; }
  .progress .progress-bar-roxo-80 {
    position: absolute;
    width: 80%;
    height: 100%;
    background-color: #9B50BA; }
  .progress .progress-bar-amarelo-80 {
    position: absolute;
    width: 80%;
    height: 100%;
    background-color: #F2CA26; }
  .progress .progress-bar-vermelho-80 {
    position: absolute;
    width: 80%;
    height: 100%;
    background-color: #D04233; }
  .progress .progress-bar-laranja-80 {
    position: absolute;
    width: 80%;
    height: 100%;
    background-color: #e67e22; }
  .progress .progress-bar-rosa-80 {
    position: absolute;
    width: 80%;
    height: 100%;
    background-color: #D2527F; }
  .progress .progress-bar-marron-80 {
    position: absolute;
    width: 80%;
    height: 100%;
    background-color: #795548; }
  .progress .progress-bar-preto-80 {
    position: absolute;
    width: 80%;
    height: 100%;
    background-color: #000; }
  .progress .progress-bar-verde-90 {
    position: absolute;
    width: 90%;
    height: 100%;
    background-color: #2CC36B; }
  .progress .progress-bar-azul-90 {
    position: absolute;
    width: 90%;
    height: 100%;
    background-color: #2E8ECE; }
  .progress .progress-bar-roxo-90 {
    position: absolute;
    width: 90%;
    height: 100%;
    background-color: #9B50BA; }
  .progress .progress-bar-amarelo-90 {
    position: absolute;
    width: 90%;
    height: 100%;
    background-color: #F2CA26; }
  .progress .progress-bar-vermelho-90 {
    position: absolute;
    width: 90%;
    height: 100%;
    background-color: #D04233; }
  .progress .progress-bar-laranja-90 {
    position: absolute;
    width: 90%;
    height: 100%;
    background-color: #e67e22; }
  .progress .progress-bar-rosa-90 {
    position: absolute;
    width: 90%;
    height: 100%;
    background-color: #D2527F; }
  .progress .progress-bar-marron-90 {
    position: absolute;
    width: 90%;
    height: 100%;
    background-color: #795548; }
  .progress .progress-bar-preto-90 {
    position: absolute;
    width: 90%;
    height: 100%;
    background-color: #000; }

/* -------------------------------------
 * Bar container
 * ------------------------------------- */
.progress-radial {
  position: relative;
  margin: 0 auto;
  width: 140px;
  height: 140px;
  border: 2px solid #fff;
  background-color: #0088CC;
  -webkit-border-radius: 50%;
  -moz-border-radius: 50%;
  -ms-border-radius: 50%;
  -o-border-radius: 50%;
  border-radius: 50%; }
  .progress-radial .overlay {
    position: absolute;
    width: 70px;
    height: 70px;
    background-color: #fff;
    border-radius: 50%;
    text-align: center;
    left: 50%;
    -webkit-transform: translate(-50%);
    -moz-transform: translate(-50%);
    -ms-transform: translate(-50%);
    -o-transform: translate(-50%);
    transform: translate(-50%);
    top: 25%;
    font-size: 1.5rem;
    padding: 1rem 0; }

/* -------------------------------------
 * Mixin for progress-% class
 * ------------------------------------- */
.progress-0 {
  background-image: linear-gradient(90deg, #fff 50%, transparent 50%, transparent), linear-gradient(90deg, #0088CC 50%, #fff 50%, #fff); }

.progress-5 {
  background-image: linear-gradient(90deg, #fff 50%, transparent 50%, transparent), linear-gradient(108deg, #0088CC 50%, #fff 50%, #fff); }

.progress-10 {
  background-image: linear-gradient(90deg, #fff 50%, transparent 50%, transparent), linear-gradient(126deg, #0088CC 50%, #fff 50%, #fff); }

.progress-15 {
  background-image: linear-gradient(90deg, #fff 50%, transparent 50%, transparent), linear-gradient(144deg, #0088CC 50%, #fff 50%, #fff); }

.progress-20 {
  background-image: linear-gradient(90deg, #fff 50%, transparent 50%, transparent), linear-gradient(162deg, #0088CC 50%, #fff 50%, #fff); }

.progress-25 {
  background-image: linear-gradient(90deg, #fff 50%, transparent 50%, transparent), linear-gradient(180deg, #0088CC 50%, #fff 50%, #fff); }

.progress-30 {
  background-image: linear-gradient(90deg, #fff 50%, transparent 50%, transparent), linear-gradient(198deg, #0088CC 50%, #fff 50%, #fff); }

.progress-35 {
  background-image: linear-gradient(90deg, #fff 50%, transparent 50%, transparent), linear-gradient(216deg, #0088CC 50%, #fff 50%, #fff); }

.progress-40 {
  background-image: linear-gradient(90deg, #fff 50%, transparent 50%, transparent), linear-gradient(234deg, #0088CC 50%, #fff 50%, #fff); }

.progress-45 {
  background-image: linear-gradient(90deg, #fff 50%, transparent 50%, transparent), linear-gradient(252deg, #0088CC 50%, #fff 50%, #fff); }

.progress-50 {
  background-image: linear-gradient(-90deg, #0088CC 50%, transparent 50%, transparent), linear-gradient(270deg, #0088CC 50%, #fff 50%, #fff); }

.progress-55 {
  background-image: linear-gradient(-72deg, #0088CC 50%, transparent 50%, transparent), linear-gradient(270deg, #0088CC 50%, #fff 50%, #fff); }

.progress-60 {
  background-image: linear-gradient(-54deg, #0088CC 50%, transparent 50%, transparent), linear-gradient(270deg, #0088CC 50%, #fff 50%, #fff); }

.progress-65 {
  background-image: linear-gradient(-36deg, #0088CC 50%, transparent 50%, transparent), linear-gradient(270deg, #0088CC 50%, #fff 50%, #fff); }

.progress-70 {
  background-image: linear-gradient(-18deg, #0088CC 50%, transparent 50%, transparent), linear-gradient(270deg, #0088CC 50%, #fff 50%, #fff); }

.progress-75 {
  background-image: linear-gradient(0deg, #0088CC 50%, transparent 50%, transparent), linear-gradient(270deg, #0088CC 50%, #fff 50%, #fff); }

.progress-80 {
  background-image: linear-gradient(18deg, #0088CC 50%, transparent 50%, transparent), linear-gradient(270deg, #0088CC 50%, #fff 50%, #fff); }

.progress-85 {
  background-image: linear-gradient(36deg, #0088CC 50%, transparent 50%, transparent), linear-gradient(270deg, #0088CC 50%, #fff 50%, #fff); }

.progress-90 {
  background-image: linear-gradient(54deg, #0088CC 50%, transparent 50%, transparent), linear-gradient(270deg, #0088CC 50%, #fff 50%, #fff); }

.progress-95 {
  background-image: linear-gradient(72deg, #0088CC 50%, transparent 50%, transparent), linear-gradient(270deg, #0088CC 50%, #fff 50%, #fff); }

.progress-100 {
  background-image: linear-gradient(90deg, #0088CC 50%, transparent 50%, transparent), linear-gradient(270deg, #0088CC 50%, #fff 50%, #fff); }

.card-item {
  margin-bottom: 2rem;
  position: relative;
  border: 1px solid #ddd;
  -webkit-transition: .2s;
  -moz-transition: .2s;
  transition: .2s; }
  @media  (min-width: 600px) {
    .card-item {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 48.5%;
      margin-left: 0%;
      margin-right: 3%; }
      .card-item:before, .card-item:after {
        content: '';
        display: table; }
      .card-item:after {
        clear: both; }
      .card-item:nth-of-type(2n) {
        margin-right: 0%;
        float: right; }
      .card-item:nth-of-type(2n+1) {
        clear: both; } }
  @media  (min-width: 900px) {
    .card-item {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 31.3333333333%;
      margin-left: 0%;
      margin-right: 3%; }
      .card-item:before, .card-item:after {
        content: '';
        display: table; }
      .card-item:after {
        clear: both; }
      .card-item:nth-of-type(2n) {
        margin-right: 3%;
        float: left; }
      .card-item:nth-of-type(2n+1) {
        clear: none; }
      .card-item:nth-of-type(3n) {
        margin-right: 0%;
        float: right; }
      .card-item:nth-of-type(3n+1) {
        clear: both; } }
  .card-item:hover, .card-item:active {
    box-shadow: 0 27px 24px rgba(0, 0, 0, 0.2), 0 40px 77px rgba(0, 0, 0, 0.22);
    background-color: #f3f3f3; }
  .card-item-midia, .card-item-midia > img, .card-item a > img {
    max-width: 100%;
    height: auto; }
  .card-item-text, .card-item-action {
    width: 100%;
    height: 20%;
    display: block;
    padding: 1rem;
    font-size: .9rem; }
    .card-item-text > i, .card-item-action > i {
      color: #e0e0e0;
      font-size: 1.2rem;
      padding: .5rem;
      width: 23%;
      height: 23%;
      text-align: center;
      cursor: default; }
    .card-item-text .design, .card-item-text .front-end, .card-item-text .responsivo, .card-item-text .wordpress, .card-item-action .design, .card-item-action .front-end, .card-item-action .responsivo, .card-item-action .wordpress {
      color: #424242; }
  .card-item-action {
    border-top: 1px solid #ddd;
    text-align: right;
    text-transform: uppercase; }

/*!
 * Waves v0.7.1
 * http://fian.my.id/Waves 
 * 
 * Copyright 2014 Alfiana E. Sibuea and other contributors 
 * Released under the MIT license 
 * https://github.com/fians/Waves/blob/master/LICENSE 
 */
.waves-effect {
  position: relative;
  display: inline-block;
  overflow: hidden;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-tap-highlight-color: transparent; }
  .waves-effect .waves-ripple {
    position: absolute;
    border-radius: 50%;
    width: 100px;
    height: 100px;
    margin-top: -50px;
    margin-left: -50px;
    opacity: 0;
    background: rgba(0, 0, 0, 0.2);
    background: -webkit-radial-gradient(rgba(0, 0, 0, 0.2) 0, rgba(0, 0, 0, 0.3) 40%, rgba(0, 0, 0, 0.4) 50%, rgba(0, 0, 0, 0.5) 60%, rgba(255, 255, 255, 0) 70%);
    background: -o-radial-gradient(rgba(0, 0, 0, 0.2) 0, rgba(0, 0, 0, 0.3) 40%, rgba(0, 0, 0, 0.4) 50%, rgba(0, 0, 0, 0.5) 60%, rgba(255, 255, 255, 0) 70%);
    background: -moz-radial-gradient(rgba(0, 0, 0, 0.2) 0, rgba(0, 0, 0, 0.3) 40%, rgba(0, 0, 0, 0.4) 50%, rgba(0, 0, 0, 0.5) 60%, rgba(255, 255, 255, 0) 70%);
    background: radial-gradient(rgba(0, 0, 0, 0.2) 0, rgba(0, 0, 0, 0.3) 40%, rgba(0, 0, 0, 0.4) 50%, rgba(0, 0, 0, 0.5) 60%, rgba(255, 255, 255, 0) 70%);
    -webkit-transition: all 0.5s ease-out;
    -moz-transition: all 0.5s ease-out;
    transition: all 0.5s ease-out;
    -webkit-transition-property: -webkit-transform, opacity;
    -moz-transition-property: -moz-transform, opacity;
    -o-transition-property: -o-transform, opacity;
    transition-property: transform, opacity;
    -webkit-transform: scale(0) translate(0, 0);
    -moz-transform: scale(0) translate(0, 0);
    -ms-transform: scale(0) translate(0, 0);
    -o-transform: scale(0) translate(0, 0);
    transform: scale(0) translate(0, 0);
    pointer-events: none; }
  .waves-effect.waves-light .waves-ripple {
    background: rgba(255, 255, 255, 0.4);
    background: -webkit-radial-gradient(rgba(255, 255, 255, 0.2) 0, rgba(255, 255, 255, 0.3) 40%, rgba(255, 255, 255, 0.4) 50%, rgba(255, 255, 255, 0.5) 60%, rgba(255, 255, 255, 0) 70%);
    background: -o-radial-gradient(rgba(255, 255, 255, 0.2) 0, rgba(255, 255, 255, 0.3) 40%, rgba(255, 255, 255, 0.4) 50%, rgba(255, 255, 255, 0.5) 60%, rgba(255, 255, 255, 0) 70%);
    background: -moz-radial-gradient(rgba(255, 255, 255, 0.2) 0, rgba(255, 255, 255, 0.3) 40%, rgba(255, 255, 255, 0.4) 50%, rgba(255, 255, 255, 0.5) 60%, rgba(255, 255, 255, 0) 70%);
    background: radial-gradient(rgba(255, 255, 255, 0.2) 0, rgba(255, 255, 255, 0.3) 40%, rgba(255, 255, 255, 0.4) 50%, rgba(255, 255, 255, 0.5) 60%, rgba(255, 255, 255, 0) 70%); }
  .waves-effect.waves-color .waves-ripple {
    background: rgba(0, 136, 204, 0.9); }
  .waves-effect.waves-classic .waves-ripple {
    background: rgba(0, 0, 0, 0.2); }
  .waves-effect.waves-classic.waves-light .waves-ripple {
    background: rgba(255, 255, 255, 0.4); }
  .waves-effect.waves-classic.waves-color .waves-ripple {
    background: rgba(0, 136, 204, 0.9); }

.waves-notransition {
  -webkit-transition: none !important;
  -moz-transition: none !important;
  transition: none !important; }

/* Firefox Bug: link not triggered */
a.waves-effect .waves-ripple {
  z-index: -1; }

.tooltip {
  position: relative;
  cursor: help !important; }
  .tooltip:hover:after {
    content: attr(data-title);
    position: absolute;
    bottom: -20px;
    left: 50%;
    -webkit-transform: translateX(-50%);
    -moz-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    -o-transform: translateX(-50%);
    transform: translateX(-50%);
    display: block;
    color: #fff;
    font-size: .7rem;
    text-transform: uppercase;
    background-color: rgba(0, 0, 0, 0.8);
    padding: .4rem;
    -webkit-border-radius: 4px;
    -moz-border-radius: 4px;
    -ms-border-radius: 4px;
    -o-border-radius: 4px;
    border-radius: 4px;
    font-family: 'Open Sans', 'sans-serif'; }

.raised-button {
  display: inline-block;
  text-align: center;
  vertical-align: middle;
  cursor: pointer;
  white-space: nowrap;
  text-transform: uppercase;
  font-size: 1rem;
  border: none;
  color: #fff;
  background-color: #0088CC;
  padding: 1rem;
  margin: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  -ms-border-radius: 0;
  -o-border-radius: 0;
  border-radius: 0;
  -webkit-transform: translateZ(0);
  -moz-transform: translateZ(0);
  -ms-transform: translateZ(0);
  -o-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-mask-image: -webkit-radial-gradient(circle, white 100%, black 100%);
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.16), 0 2px 10px rgba(0, 0, 0, 0.12);
  -webkit-transition: .2s;
  -moz-transition: .2s;
  transition: .2s; }
  .raised-button:hover, .raised-button:active {
    box-shadow: 0 27px 24px rgba(0, 0, 0, 0.2), 0 40px 77px rgba(0, 0, 0, 0.22); }

.flat-button {
  display: inline-block;
  text-align: center;
  vertical-align: middle;
  cursor: pointer;
  white-space: nowrap;
  text-transform: uppercase;
  font-size: 1rem;
  border: none;
  color: #292c2e;
  background-color: transparent;
  padding: 0.5rem;
  margin: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  -ms-border-radius: 0;
  -o-border-radius: 0;
  border-radius: 0;
  -webkit-transform: translateZ(0);
  -moz-transform: translateZ(0);
  -ms-transform: translateZ(0);
  -o-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-mask-image: -webkit-radial-gradient(circle, white 100%, black 100%); }

i.md-effect, i.md-effect-light {
  width: 1.5em;
  height: 1.5em;
  line-height: 1.5em;
  -webkit-border-radius: 50%;
  -moz-border-radius: 50%;
  -ms-border-radius: 50%;
  -o-border-radius: 50%;
  border-radius: 50%; }

.timeline {
  position: relative; }
  .timeline:before {
    content: '';
    position: absolute;
    width: 4px;
    background-color: #DDD;
    height: 75%;
    top: 7rem;
    left: 1.5rem;
    display: block; }
    @media  (min-width: 900px) {
      .timeline:before {
        left: 50%;
        -webkit-transform: translateX(-50%);
        -moz-transform: translateX(-50%);
        -ms-transform: translateX(-50%);
        -o-transform: translateX(-50%);
        transform: translateX(-50%); } }

.timeline-block {
  position: relative;
  margin-bottom: 2rem;
  *zoom: 1; }
  .timeline-block:before, .timeline-block:after {
    content: '';
    display: table; }
  .timeline-block:after {
    clear: both; }
  .timeline-block:first-child {
    margin-top: 2rem; }
  @media  (min-width: 900px) {
    .timeline-block:nth-of-type(even) .timeline-block-content {
      float: right;
      text-align: left; } }
  @media  (min-width: 900px) {
    .timeline-block:nth-of-type(even) .timeline-block-footer {
      left: 0;
      text-align: right; }
      .timeline-block:nth-of-type(even) .timeline-block-footer .timeline-block-footer-icon {
        float: right;
        margin: 0.3rem 0 0 0.5rem; } }
  .timeline-block:hover {
    cursor: default; }

.timeline-block-icon {
  position: absolute;
  left: -.3rem;
  width: 30px;
  height: 30px;
  background-color: #fff;
  border: 4px solid #DDD;
  -webkit-transition: .2s;
  -moz-transition: .2s;
  transition: .2s;
  -webkit-border-radius: 50%;
  -moz-border-radius: 50%;
  -ms-border-radius: 50%;
  -o-border-radius: 50%;
  border-radius: 50%; }
  @media  (min-width: 900px) {
    .timeline-block-icon {
      left: 50%;
      -webkit-transform: translateX(-50%);
      -moz-transform: translateX(-50%);
      -ms-transform: translateX(-50%);
      -o-transform: translateX(-50%);
      transform: translateX(-50%); } }
  .timeline-block-icon:hover {
    background-color: #DDD; }
    .timeline-block-icon:hover ~ .timeline-block-content {
      background-color: #DDD; }
    .timeline-block-icon:hover ~ .timeline-block-content, .timeline-block-icon:hover ~ .timeline-block-content .timeline-block-footer {
      box-shadow: 0 27px 24px rgba(0, 0, 0, 0.2), 0 40px 77px rgba(0, 0, 0, 0.22); }

.timeline-block-content {
  background-color: #fff;
  margin-left: 2rem;
  border: 1px solid #ddd;
  -webkit-transition: .2s;
  -moz-transition: .2s;
  transition: .2s; }
  @media  (min-width: 900px) {
    .timeline-block-content {
      width: 45%;
      margin: 0;
      clear: both;
      text-align: right; } }

.timeline-block-title {
  font-size: 1.6rem;
  padding: 1rem 1rem 0;
  margin: 0;
  font-weight: 400;
  color: #424242; }

.timeline-block-text {
  font-weight: 300;
  font-size: 1rem;
  font-style: italic;
  padding: 1rem;
  margin: 0; }

.timeline-block-footer {
  background-color: #0088CC;
  display: block;
  padding: 1rem;
  color: #fff;
  -webkit-transition: .2s;
  -moz-transition: .2s;
  transition: .2s; }
  @media  (min-width: 900px) {
    .timeline-block-footer {
      position: absolute;
      right: 0;
      top: 0;
      width: 45%;
      text-align: left; } }

.timeline-block-footer-icon {
  font-size: 2rem;
  float: left;
  margin: .3rem .5rem 0 0; }

.timeline-block-local {
  font-size: 1rem;
  font-weight: 500;
  display: block; }

.timeline-block-date {
  font-size: .8rem; }

.article {
  margin-bottom: 3rem;
  font-size: 0;
  border: 1px solid #ddd;
  background-color: #fff;
  width: 100%;
  -webkit-transition: .2s;
  -moz-transition: .2s;
  transition: .2s; }
  @media  (min-width: 600px) {
    .article {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 48.5%;
      margin-left: 0%;
      margin-right: 3%; }
      .article:before, .article:after {
        content: '';
        display: table; }
      .article:after {
        clear: both; }
      .article:nth-of-type(2n) {
        margin-right: 0%;
        float: right; }
      .article:nth-of-type(2n+1) {
        clear: both; } }
  @media  (min-width: 900px) {
    .article {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 22.75%;
      margin-left: 0%;
      margin-right: 3%; }
      .article:before, .article:after {
        content: '';
        display: table; }
      .article:after {
        clear: both; }
      .article:nth-of-type(2n) {
        margin-right: 3%;
        float: left; }
      .article:nth-of-type(2n+1) {
        clear: none; }
      .article:nth-of-type(4n) {
        margin-right: 0%;
        float: right; }
      .article:nth-of-type(4n+1) {
        clear: both; } }
  @media  (min-width: 1200px) {
    .article {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 48.5%;
      margin-left: 0%;
      margin-right: 3%; }
      .article:before, .article:after {
        content: '';
        display: table; }
      .article:after {
        clear: both; }
      .article:nth-of-type(4n) {
        margin-right: 3%;
        float: left; }
      .article:nth-of-type(4n+1) {
        clear: none; }
      .article:nth-of-type(2n) {
        margin-right: 0%;
        float: right; }
      .article:nth-of-type(2n+1) {
        clear: both; } }
  .article:hover {
    box-shadow: 0 27px 24px rgba(0, 0, 0, 0.2), 0 40px 77px rgba(0, 0, 0, 0.22);
    background-color: #DDD; }

.article-thumb {
  margin: 0; }
  @media  (min-width: 1200px) {
    .article-thumb {
      display: inline-block;
      width: 30%;
      max-width: 200px;
      vertical-align: top; } }
  .article-thumb img {
    display: block;
    height: auto; }

.article-excerpt {
  padding: 1rem; }
  @media  (min-width: 1200px) {
    .article-excerpt {
      width: 70%;
      display: inline-block;
      vertical-align: top; } }
  .article-excerpt h2 {
    margin: 0 0 0.5rem;
    font-size: 1rem;
    color: #424242; }
  .article-excerpt p {
    margin: 0;
    font-size: .8rem;
    font-style: italic; }

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/* INSERT HERE THE EXTEND CLASS */
.list {
  list-style: none;
  padding: 0;
  margin: 0; }

.about {
  text-align: center;
  background: transparent url('../../dist/images/bg.jpg') fixed center no-repeat;
  background-size: cover;
  padding-bottom: 10%;
  height: 110%;
  min-height: 640px; }

.about-avatar {
  max-width: 50%;
  margin-bottom: 1rem;
  border: 5px solid #fff;
  -webkit-border-radius: 50%;
  -moz-border-radius: 50%;
  -ms-border-radius: 50%;
  -o-border-radius: 50%;
  border-radius: 50%; }
  @media  (min-width: 600px) {
    .about-avatar {
      max-width: 250px; } }

.about-name {
  margin: 0;
  font-size: 2rem;
  color: #fff;
  font-weight: bold; }

.about-role {
  color: #fff;
  font-size: 1.5rem;
  margin: 0; }

.social-icons {
  width: 100%;
  margin: 1rem 0; }
  .social-icons .social-icons-link {
    color: #fff;
    font-size: 1.5rem; }
    .social-icons .social-icons-link:hover {
      color: #0088CC;
      -webkit-transition: .2s;
      -moz-transition: .2s;
      transition: .2s; }

.single-header {
  text-align: center;
  background-size: cover !important;
  padding-bottom: 10%;
  height: 110%;
  max-height: 320px;
  color: #fff; }

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/* INSERT HERE THE EXTEND CLASS */
.list {
  list-style: none;
  padding: 0;
  margin: 0; }

.icon-bar-overlay {
  position: absolute;
  right: 0;
  left: 0;
  top: 0;
  bottom: 0;
  display: none; }

.icon-bar {
  font-size: 1.5rem;
  color: #fff;
  cursor: pointer;
  position: fixed;
  top: 10px;
  left: 10px;
  text-align: center;
  padding: 0;
  z-index: 1;
  -webkit-transition: .4s;
  -moz-transition: .4s;
  transition: .4s; }
  .icon-bar i {
    background-color: #0088CC;
    line-height: 2;
    width: 2em;
    height: 2em;
    position: absolute;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.16), 0 2px 10px rgba(0, 0, 0, 0.12);
    -webkit-transition: .2s;
    -moz-transition: .2s;
    transition: .2s; }
    .icon-bar i:hover, .icon-bar i:active {
      box-shadow: 0 27px 24px rgba(0, 0, 0, 0.2), 0 40px 77px rgba(0, 0, 0, 0.22); }
    .icon-bar i.fa-remove {
      visibility: hidden; }

.icon-bar-checkbox {
  position: fixed;
  top: 10px;
  left: 10px;
  z-index: 1;
  width: 30px;
  height: 30px;
  display: none; }
  .icon-bar-checkbox:checked ~ .icon-bar-overlay {
    display: block; }
  .icon-bar-checkbox:checked ~ .icon-bar {
    -webkit-transform: translateX(260px);
    -moz-transform: translateX(260px);
    -ms-transform: translateX(260px);
    -o-transform: translateX(260px);
    transform: translateX(260px); }
    .icon-bar-checkbox:checked ~ .icon-bar i.fa-bars {
      visibility: hidden; }
    .icon-bar-checkbox:checked ~ .icon-bar i.fa-remove {
      visibility: visible; }
  .icon-bar-checkbox:checked ~ .lateral {
    -webkit-transform: translateX(0px);
    -moz-transform: translateX(0px);
    -ms-transform: translateX(0px);
    -o-transform: translateX(0px);
    transform: translateX(0px); }

.lateral {
  width: 250px;
  background-color: #333;
  position: fixed;
  z-index: 1;
  height: 100%;
  -webkit-transform: translateX(-250px);
  -moz-transform: translateX(-250px);
  -ms-transform: translateX(-250px);
  -o-transform: translateX(-250px);
  transform: translateX(-250px);
  top: 0;
  -webkit-transition: .4s;
  -moz-transition: .4s;
  transition: .4s; }

.logo {
  border: 5px solid #fff;
  -webkit-border-radius: 50%;
  -moz-border-radius: 50%;
  -ms-border-radius: 50%;
  -o-border-radius: 50%;
  border-radius: 50%;
  width: 150px;
  height: 150px;
  margin: 20px auto;
  display: block; }

.capa-lateral {
  background-color: #272727;
  padding: 1.5rem .5rem;
  text-align: center; }
  .capa-lateral .foto {
    max-width: 3rem;
    float: left;
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -o-border-radius: 50%;
    border-radius: 50%; }
  .capa-lateral h1, .capa-lateral h2 {
    margin: 0;
    color: #fff; }

.menu ul {
  list-style: none;
  margin: 0;
  padding: 0; }
.menu .menu-item {
  display: block; }
.menu .menu-link {
  color: #fff;
  font-size: 1.2rem;
  text-transform: uppercase;
  padding: .5rem 1rem;
  display: block;
  border-right: 5px solid #333;
  -webkit-transition: .2s;
  -moz-transition: .2s;
  transition: .2s;
  -webkit-transform: translateZ(0);
  -moz-transform: translateZ(0);
  -ms-transform: translateZ(0);
  -o-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-mask-image: -webkit-radial-gradient(circle, white 100%, black 100%); }
  .menu .menu-link > i {
    width: 24px;
    display: inline-block;
    text-align: center;
    margin-right: .5rem; }
  .menu .menu-link:hover {
    background-color: #272727;
    border-color: #0088CC;
    color: #0088CC; }

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/* INSERT HERE THE EXTEND CLASS */
.list {
  list-style: none;
  padding: 0;
  margin: 0; }

.rodape {
  background-color: #000;
  color: #fff;
  margin: 0;
  padding: 0;
  display: block;
  width: 100%;
  clear: both; }

.creditos {
  margin: 0;
  text-align: center;
  padding: 5% 0;
  font-size: .8rem; }

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/* INSERT HERE THE EXTEND CLASS */
.list {
  list-style: none;
  padding: 0;
  margin: 0; }

.biography-text {
  margin-top: 0; }
  @media  (min-width: 600px) {
    .biography-text {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 48.5%;
      margin-left: 0%;
      margin-right: 3%; }
      .biography-text:before, .biography-text:after {
        content: '';
        display: table; }
      .biography-text:after {
        clear: both; }
      .biography-text:last-child {
        margin-right: 0%; } }

.biography-data {
  font-size: 0; }
  @media  (min-width: 600px) {
    .biography-data {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 48.5%;
      margin-left: 0%;
      margin-right: 3%; }
      .biography-data:before, .biography-data:after {
        content: '';
        display: table; }
      .biography-data:after {
        clear: both; }
      .biography-data:last-child {
        margin-right: 0%; } }

.biography-data-label {
  display: block;
  font-size: 1rem;
  white-space: nowrap;
  margin-bottom: 1rem; }
  @media  (min-width: 900px) {
    .biography-data-label {
      width: 50%;
      display: inline-block; } }
  .biography-data-label:last-child {
    display: block;
    width: 100%; }
  .biography-data-label i {
    display: inline-block;
    margin-right: 0.5rem; }

.conhecimentos-gerais {
  margin: 4% 0;
  *zoom: 1; }
  .conhecimentos-gerais:before, .conhecimentos-gerais:after {
    content: '';
    display: table; }
  .conhecimentos-gerais:after {
    clear: both; }

.conhecimentos-gerais-item {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 31.3333333333%;
  margin-left: 0%;
  margin-right: 3%; }
  .conhecimentos-gerais-item:before, .conhecimentos-gerais-item:after {
    content: '';
    display: table; }
  .conhecimentos-gerais-item:after {
    clear: both; }
  .conhecimentos-gerais-item:last-child {
    margin-right: 0%; }
  .conhecimentos-gerais-item .overlay {
    color: #0088CC; }
  .conhecimentos-gerais-item .conhecimentos-gerais-item-nome {
    text-align: center;
    font-size: 1rem;
    color: #424242;
    font-weight: 700; }

@media screen and (max-width: 468px) {
  .conhecimentos-gerais-item {
    display: block;
    clear: both;
    float: none;
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    text-align: center; }
    .conhecimentos-gerais-item:first-child {
      margin-left: auto; }
    .conhecimentos-gerais-item:last-child {
      margin-right: auto; } }

.conhecimentos-especificos {
  list-style: none;
  padding: 0;
  margin: 0; }

@media screen and (min-width: 900px) {
  .conhecimentos {
    display: block;
    clear: both;
    float: none;
    width: 100%;
    margin-left: auto;
    margin-right: auto; }
    .conhecimentos:first-child {
      margin-left: auto; }
    .conhecimentos:last-child {
      margin-right: auto; }
  .conhecimentos-gerais, .conhecimentos-especificos {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 48.5%;
    margin-left: 0%;
    margin-right: 3%; }
    .conhecimentos-gerais:before, .conhecimentos-gerais:after, .conhecimentos-especificos:before, .conhecimentos-especificos:after {
      content: '';
      display: table; }
    .conhecimentos-gerais:after, .conhecimentos-especificos:after {
      clear: both; }
    .conhecimentos-gerais:last-child, .conhecimentos-especificos:last-child {
      margin-right: 0%; }
  .conhecimentos-especificos-item {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 48.5%;
    margin-left: 0%;
    margin-right: 3%; }
    .conhecimentos-especificos-item:before, .conhecimentos-especificos-item:after {
      content: '';
      display: table; }
    .conhecimentos-especificos-item:after {
      clear: both; }
    .conhecimentos-especificos-item:nth-of-type(2n) {
      margin-right: 0%;
      float: right; }
    .conhecimentos-especificos-item:nth-of-type(2n+1) {
      clear: both; } }

/*# sourceMappingURL=main.css.map */